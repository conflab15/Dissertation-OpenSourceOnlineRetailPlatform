@using OnlineRetailPlatformDiss.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject AuthenticationStateProvider auth;
@inject IJSRuntime js;
@inject ILogger<ViewProducts> Logger;

@attribute [Authorize]

<!-- This needs to be removed in the future to act as a component than an individual page -->
@page "/business/products/{businessName}"

<div class="container p-3">

    <h1 class="display-4 fw-bold mb-3">@businessName : Products</h1>

    @if(products is not null)
    {
        @if(products.Count != 0)
        {
        <table class="table" style="width:100%">
            <thead>
            <tr>
                <th scope="col">Product Image</th>
                <th scope="col">Product Name</th>
                <th scope="col">Product Description</th>
                <th scope="col">Options</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var product in products) //This doesn't operate, products appear then quickly disappear...
                {
                    <tr>
                        @if(product.ImageUrl == null)
                        {
                            //No image placeholder
                            <td><image src="/images/products/noimageplaceholder.jpg" id="productListImg" class="img-thumbnail img-responsive w-15" alt="Product Image Placeholder" /></td>
                            
                        }
                        else
                        {
                            //Show the image
                            <td><image src="@product.ImageUrl" id="productListImg" class="img-thumbnail img-responsive w-15" alt="Product Image" /></td>
                        }
                        <td>@product.ProductName</td>
                        <td>@product.ProductDescription</td>
                        <td><a class="btn btn-primary" href="">Edit</a><button class="btn btn-danger" @onclick="(() => DeleteProduct(product))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
        }
        else
        {
            <div class="alert alert-warning d-flex align-items-center" role="alert">
              <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
              <div>
                <p>We couldn't find any products for your business!</p>
                <a class="btn btn-alert" href="/product/create">Create Product</a>
              </div>
            </div>
        }
    }

    
</div>

@code {
    [Parameter] //Parameter of the razor component page
    public string? businessName { get; set; }
    List<ProductModel>? products = new();

    protected override void OnInitialized()
    {
        products = _context.Products?.Where(x => x.BusinessName == businessName).ToList();
    }

    private async void DeleteProduct(ProductModel prodToDelete)
    {
        //Await for js SweetAlert Button to return a true or false value.
        var result = await js.InvokeAsync<bool>("confirmDelete", "Confirmation", "Are you sure about this? It cannot be undone later?", "question"); 

        if (result)
        {
            _context.Products?.Remove(prodToDelete);
            await _context.SaveChangesAsync();
            products = _context.Products?.Where(x => x.BusinessName == businessName).ToList(); //Reloads a new list with the deleted products removed from the db
            var accepted = js.InvokeAsync<bool>("confirmChanges", "Deleted", "The product has been successfully deleted!", "success");
            base.StateHasChanged();
        }
    }
}