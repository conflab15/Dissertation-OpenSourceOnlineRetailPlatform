@using OnlineRetailPlatformDiss.Models;
@using Microsoft.Extensions.Logging
@using Microsoft.EntityFrameworkCore;
@using System.IO;
@using System.Web;
@using System.Linq;
@inject IWebHostEnvironment env
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject ILogger<CreateProduct> Logger
@inject AuthenticationStateProvider auth;
@inject NavigationManager nav;
@inject IJSRuntime js;

@attribute [Authorize] 
@page "/business/products/edit/{productId:guid}"

<div class="container">
    <div class="row">
        <div class="col">
            <h1>Edit Product:</h1>
        </div>
    </div>

    <!-- If the product isn't found... -->
    @if (product is null)
    {
        <div class="alert alert-danger" role="alert">
            <p>Uh Oh! We couldn't find the product...' </p>
            <button class="btn btn-primary" href="">Back</button> <!-- Button needs a route -->
        </div>
    }
    else
    {
        <EditForm Model="@product" OnSubmit="@SubmitProductChanges">
            <DataAnnotationsValidator />
            <!--<ValidationSummary />-->
            <div class="mb-3">
                <label for="businessName" class="form-label">Business Name</label>
                <label class="alert-warning">The product cannot be assigned to another business. Please create a new product for the correct business!</label> <!-- Message because this field is disabled -->
                <InputText class="form-control" id="businessName" @bind-Value="product.BusinessName" disabled/>

            </div>
            <div class="mb-3">
                <label for="productName" class="form-label">Product Name</label>
                <InputText class="form-control" id="productName" @bind-Value="product.ProductName" />
            </div>
            <div class="mb-3">
                <label for="productDesc" class="form-label">Product Description</label>
                <InputText class="form-control" id="productDesc" @bind-Value="product.ProductDescription" />
            </div>
            <div class="mb-3">
                <label for="productPrice" class="form-label">Product Price</label>
                <InputNumber class="form-control" id="productPrice" @bind-Value="product.ProductPrice" />
            </div>
            <div class="mb-3">
                <label for="productStock" class="form-label">Stock Level</label>
                <InputNumber class="form-control" id="productStock" @bind-Value="product.StockLevel" />
            </div>
            <label for="options" class="form-label">What colours/styles will this product have?</label>
        <label class="alert-warning ml-2 pl-2">For example, a knitted bean can be made with orange, red or blue wool!</label>
        <div class="input-group mb-3">
            <InputText class="form-control" id="optionValue" @bind-Value="value"/>
            <button type="button" class="btn btn-outline-success" id="addLinkBtn" @onclick="(() => AddOption())">Add Colour/Style</button>
        </div>

        <!-- When an option has been added, this table shall load -->
        @if (product?.Colours?.Count != 0)
        {   
            <div class="mb-3">
                <label for="AddedOptions" class="form-label">Product Colour/Styles</label>
                <ul class="list-group">
                    @if (product?.Colours?.Count != 0)
                    {
                        foreach (var option in product?.Colours)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @option.Colour
                                <span>
                                    <button type="button" class="btn btn-outline-danger" id="removeOption" @onclick="(() => RemoveOption(option.Id))">Remove</button>
                                </span>
                            </li>    
                        }
                    }
                </ul>
            </div>
        }

           <div class="mb-3">
                <button class="btn btn-primary p-2" type="submit" value="submit">Submit Changes</button> 
           </div>
        </EditForm>
        <div class="mb-3">
            <button class="btn btn-danger p-2" href="/business/products/@product.BusinessName">Cancel</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? productId { get; set; } //Page parameter
    private ProductModel? product; //Product to edit

    string value = "";

    protected override void OnInitialized()
    {
        <!-- Finding the product to edit... -->
        product = _context.Products?.Include("Colours").FirstOrDefault(x => x.ProductID == productId);

    }

    private async void AddOption()
    {
        if (value != null)
        {
            var option = new ProductOptions
                {
                    Colour = value
                };
            product?.Colours?.Add(option);
            await js.InvokeVoidAsync("confirmChanges",
                    "Added",
                    $"You've added a {value} option to your product!",
                    "success"); //Swal for declaring success
            value = "";
        }
    }

    private async void RemoveOption(Guid? id)
    {
        if (id != null)
        {
            var item = product?.Colours.FirstOrDefault(o => o.Id == id);
            product?.Colours?.Remove(item);
            await js.InvokeVoidAsync("confirmChanges",
                   "Removed",
                   $"You've removed the {item?.Colour} option!",
                   "success"); //Swal for declaring success in adding a business
        }

    }


    private async void SubmitProductChanges()
    {
        //Submit Product Changes
        try
        {
            _context.Products?.Update(product); 
            <!-- Updating product and saving changes... -->
            await _context.SaveChangesAsync();
            await js.InvokeVoidAsync("confirmChanges",
                "Product Amended!",
                "Your product changes have been saved!",
                "success"); //Swal for declaring success in adding a business
            nav.NavigateTo($"/business/products/{product?.BusinessName}");
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("confirmChanges",
                    "Error",
                    $"The product could not be edited: {e.Message}",
                    "error"); //Swal for declaring error in the 
        }
    }
}

