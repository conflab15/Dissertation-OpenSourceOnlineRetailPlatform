@using OnlineRetailPlatformDiss.Models;
@using Microsoft.Extensions.Logging
@using System.IO;
@using System.Web;
@inject IWebHostEnvironment env
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject ILogger<CreateProduct> Logger
@inject AuthenticationStateProvider auth;
@inject NavigationManager nav;
@inject IJSRuntime js;

<!-- Authorising the Area to ensure a User with a valid account can log into the page -->
@attribute [Authorize] 
@page "/product/edit{productId}"

<div class="container">
    <div class="row">
        <div class="col">
            <h1>Edit the Product: @product.ProductName</h1>
        </div>
    </div>

    <!-- If the current user owns no businesses, display the message... -->
    @if (product is null)
    {
        <div class="alert alert-danger" role="alert">
            <p>Sorry, we could not find this product?</p>
            <button class="btn btn-outline-danger" href="/product/create">Create a Product</button> <!-- Button needs a route -->
        </div>
    }
    else
    {
        <EditForm Model="@product" OnSubmit="@SubmitProductChanges">
        <DataAnnotationsValidator />
        <!--<ValidationSummary />-->S
        <div class="mb-3">
            <label for="productName" class="form-label">Product Name</label>
            <InputText class="form-control" id="productName" @bind-Value="product.ProductName" placeholder="My Product" />
        </div>
        <div class="mb-3">
            <label for="productDesc" class="form-label">Product Description</label>
            <InputText class="form-control" id="productDesc" @bind-Value="product.ProductDescription" placeholder="My Product does this and that!" />
        </div>
        <div class="mb-3">
            <label for="productPrice" class="form-label">Product Price</label>
            <InputNumber class="form-control" id="productPrice" @bind-Value="product.ProductPrice" placeholder="5.99" />
        </div>
        <div class="mb-3">
            <label for="productPromo" class="form-label">Promotional Price</label>
            <InputNumber class="form-control" id="productPromo" @bind-Value="product.PromotionalPrice" placeholder="2.99" />
        </div>
        <div class="mb-3">
            <label for="productStock" class="form-label">Stock Level</label>
            <InputNumber class="form-control" id="productStock" @bind-Value="product.StockLevel" placeholder="20" />
        </div>
       <div class="mb-3">
            <button class="btn btn-primary" type="submit" value="submit">Submit</button>
       </div>
    </EditForm>
    }
</div>

@code {
    [Parameter]
    public Guid productId { get; set; } 
    private ProductModel? product; //New product model to submit through the EditForm
    private string? user; //Value for the User

    protected override void OnInitialized()
    {
        user = auth.GetAuthenticationStateAsync().Result.User.Identity?.Name; //Get the current user
        product = _context.Products?.Single(p => p.ProductID == productId);
    }

    private async void SubmitProductChanges()
    {
        try
        {
            _context.Products?.Update(product); //Add the new product
            await _context.SaveChangesAsync(); //Save the product to the db
            var accepted = js.InvokeAsync<bool>("confirmChanges",
                "Product Added!",
                "You've successfully added a product!",
                "success"); //Swal for declaring success in adding a business
            nav.NavigateTo($"/business/products/{product.BusinessName}");
        }  
        catch (Exception e)
        {
             var accepted = js.InvokeAsync<bool>("confirmChanges",
                    "Error",
                    $"The changes could not be made to your product: {e.Message}",
                    "error"); //Swal for declaring success in adding a business
        }

    }
}
