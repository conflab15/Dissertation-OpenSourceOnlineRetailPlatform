@using OnlineRetailPlatformDiss.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject AuthenticationStateProvider auth;
@inject IJSRuntime js;

@attribute [Authorize]

<!-- This needs to be removed in the future to act as a component than an individual page -->
@page "/business/products/{businessName}"

<div class="container p-3 text-center">

    <h1 class="display-4 mb-3">Products for: @businessName</h1>

    @if(products is not null)
    {
        @if(products.Count != 0)
        {
        <table class="table" style="width:100%">
            <thead>
            <tr>
                <th scope="col">Product Image</th>
                <th scope="col">Product Name</th>
                <th scope="col">Stock Level</th>
                <th scope="col">Add Stock</th>
                <th scope="col">Options</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var product in products) //This doesn't operate, products appear then quickly disappear...
                {
                    <tr>
                        @if(product.ImageUrl == null)
                        {
                            //No image placeholder
                            <td><image class="img img-thumbnail img-fluid" src="/images/products/noimageplaceholder.jpg" alt="Product Image Placeholder" id="tableImg" /></td>
                        }
                        else
                        {
                            //Show the image
                            <td><image class="img img-thumbnail img-fluid" src="@product.ImageUrl" alt="Product Image" id="tableImg" /></td>
                        }
                        <td>@product.ProductName</td>
                        <td>@product.StockLevel</td>
                        <!-- Input field with button to amend the stock level of the product -->
                        <td>
                            <div class="input-group">
                                <input type="number" class="form-control input-value" @bind-value="amount" placeholder="Enter total units to add..."/>
                                <div class="input-group-append"> 
                                    <input type="submit" class="btn btn-outline-primary" value="Add" @onclick="(() => AddStockLevel(product.ProductID, true))" />
                                    <input type="submit" class="btn btn-outline-danger" value="Remove" @onclick="(() => AddStockLevel(product.ProductID, false))" />
                                </div>
                            </div>

                        </td>

                        <td><a class="btn btn-primary" href="/business/products/edit/@product.ProductID">Edit</a><button class="btn btn-danger" @onclick="(() => DeleteProduct(product))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
        }
        else
        {
            <div class="alert alert-warning d-flex align-items-center" role="alert">
              <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
              <div>
                <p>We couldn't find any products for your business!</p>
                <a class="btn btn-alert" href="/product/create">Create Product</a>
              </div>
            </div>
        }
    }

    
</div>

@code {
    [Parameter] //Parameter of the razor component page
    public string? businessName { get; set; }
    public int amount { get; set; }
    List<ProductModel>? products = new();

    protected override void OnInitialized()
    {
        products = _context.Products?.Where(x => x.BusinessName == businessName).ToList();
    }

    //Quick method of amending the stock level...
    private async void AddStockLevel(Guid productId, bool ToAdd)
    {
        //Find the Product by the Guid passed to method
        try
        {
            //Find the product to amend stock level
            ProductModel? product = await _context.Products?.FirstOrDefaultAsync(p => p.ProductID == productId);
            if (product != null)
            {
                var proceed = await js.InvokeAsync<bool>("confirmAmendments", "Confirmation", $"Are you sure you want to add/remove {amount} units of {product.ProductName}?", "question");
                if (proceed)
                {
                    if(ToAdd) //If true, add stock
                    {
                        product.StockLevel = product.StockLevel + amount;
                        await _context.SaveChangesAsync();
                        await js.InvokeVoidAsync("confirmChanges", "Success", $"The stock level for {product.ProductName} has been amended!", "success");
                        base.StateHasChanged();
                    }
                    else //If false, remove stock
                    {
                        product.StockLevel = product.StockLevel - amount;
                        await _context.SaveChangesAsync();
                        await js.InvokeVoidAsync("confirmChanges", "Success", $"The stock level for {product.ProductName} has been amended!", "success");
                        base.StateHasChanged();
                    }

                }
            }
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("confirmChanges", "Failed", $"The stock amendment could not be actioned: {e.Message}!", "warning");
        }

    }

    //Deleting a Product from the database...
    private async void DeleteProduct(ProductModel prodToDelete)
    {
        //Await for js SweetAlert Button to return a true or false value.
        var result = await js.InvokeAsync<bool>("confirmDelete", "Confirmation", "Are you sure about this? It cannot be undone later?", "question"); 

        if (result)
        {
            _context.Products?.Remove(prodToDelete);
            await _context.SaveChangesAsync();
            products = _context.Products?.Where(x => x.BusinessName == businessName).ToList(); //Reloads a new list with the deleted products removed from the db
            await js.InvokeVoidAsync("confirmChanges", "Deleted", "The product has been successfully deleted!", "success");
            base.StateHasChanged();
        }
    }
}