@using OnlineRetailPlatformDiss.Models;
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@using Microsoft.Extensions.Logging
@inject ILogger<CreateBusiness> Logger
@inject AuthenticationStateProvider auth;
@inject NavigationManager nav;
@inject IJSRuntime js;


@attribute [Authorize]

@page "/business/create"

<div class="container">
    <div class="row">
        <div class="col">
            <h1>Create your Business</h1>
        </div>
    </div>
    <EditForm Model="@businessAccount" OnValidSubmit="@SubmitBusinessAccount">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="businessName" class="form-label">Business Name</label>
            <InputText class="form-control" id="businessName" @bind-Value="businessAccount.BusinessName" placeholder="name@example.com" />
        </div>

        <div class="mb-3">
            <label for="businessDesc" class="form-label">Business Description</label>
            <InputTextArea class="form-control" id="businessDesc" @bind-Value="businessAccount.BusinessDesc" placeholder="My business sells this and that..." />
        </div>

        <div class="mb-3">
            <label for="businessAddr1" class="form-label">Address Line 1</label>
            <InputText class="form-control" id="businessAddr1" @bind-Value="businessAccount.AddressLine1" placeholder="12 Business Street" />
        </div>

        <div class="mb-3">
            <label for="businessAddr2" class="form-label">Address Line 2</label>
            <InputText class="form-control" id="businessAddr2" @bind-Value="businessAccount.AddressLine2" placeholder="Business Avenue" />
        </div>

        <div class="mb-3">
            <label for="businessTown" class="form-label">Town</label>
            <InputText class="form-control" id="businessTown" @bind-Value="businessAccount.Town" placeholder="Business Town" />
        </div>

        <div class="mb-3">
            <label for="businessCounty" class="form-label">County</label>
            <InputText class="form-control" id="businessCounty" @bind-Value="businessAccount.County" placeholder="Business County" />
        </div>

        <div class="mb-3">
            <label for="businessPostCode" class="form-label">Post Code</label>
            <InputText class="form-control" id="businessPostCode" @bind-Value="businessAccount.PostCode" placeholder="BU12 2ES" />
        </div>
         <div class="mb-3">
            <label for="bannerUrl" class="form-label">Product Image</label>
            <InputFile class="form-control" id="bannerUrl" OnChange="OnInputFileChange" />
        </div>
        <div class="mb-3">
            <div class="alert alert-success d-flex align-items-center" role="alert">
                <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>
                <div>
                    @Message
                </div>
            </div>
        </div>
        <!-- Hidden Field binding this.... -->
        <InputText type="hidden" id="businessManager" @bind-Value="businessAccount.ManagerID" placeholder="@manager"/>

       <div class="mb-3">
            <button class="btn btn-primary" type="submit" value="submit">Submit</button>
       </div>

    </EditForm>
</div>

@code {
    private BusinessAccountModel businessAccount = new();
    private string? manager;
    private string Message = "No Image(s) selected"; //Variables for handling the image upload
    IReadOnlyList<IBrowserFile>? selectedImages; //File to handle uploaded images

    protected override void OnInitialized()
    {
        manager = auth.GetAuthenticationStateAsync().Result.User.Identity?.Name;
        businessAccount.ManagerID = manager;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedImages = e.GetMultipleFiles();
        Message = $"{selectedImages.Count} image(s) selected";
        this.StateHasChanged();
    }

    private async void SubmitBusinessAccount()
    {
        try
        {
            if (selectedImages is not null)
            {
                foreach (var image in selectedImages)
                {
                    Stream stream = image.OpenReadStream(); //Open stream for the handled image
                    var path = $"/images/business/{image.Name}"; //Creating a product URL
                    FileStream fs = File.Create($"wwwroot{path}"); //Saving image in the URL
                    await stream.CopyToAsync(fs); 
                    stream.Close();
                    fs.Close();
                    businessAccount.BannerUrl = path;
                }

                Message = $"{selectedImages.Count} image(s) uploaded"; //Updating the message within the form...

                //Value is created for GoogleMaps API
                businessAccount.MapsAddr = String.Concat(businessAccount.AddressLine1 + " " + businessAccount.AddressLine2 + " " + businessAccount.Town + " " + businessAccount.PostCode);

                _context.BusinessAccount?.AddAsync(businessAccount);
                await _context.SaveChangesAsync();

                var accepted = js.InvokeAsync<bool>("confirmChanges",
                    "Added",
                    "You've successfully added your business!",
                    "success"); //Swal for declaring success in adding a business
                nav.NavigateTo("/business/view");
            }

            
        }  
        catch
        {
            base.StateHasChanged();

        }
        businessAccount = new BusinessAccountModel();
        base.StateHasChanged();
    }
}
