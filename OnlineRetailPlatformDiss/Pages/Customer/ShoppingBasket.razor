@using OnlineRetailPlatformDiss.Models;
@using OnlineRetailPlatformDiss.Services;
@inject ShoppingBasketService basket;
@inject AppState state;
@inject IJSRuntime js;
@inject NavigationManager nav;

@attribute [Authorize]

@page "/ShoppingBasket"

@if (basketVM?.BasketItems == null)
{
    <div class="alert alert-warning d-flex align-items-center" role="alert">
      <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
      <div>
        It looks like you haven't added any products to your basket! Please add something!
      </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-8 mr-1">
                @foreach(var basket in basketVM.BasketItems)
                {
                    <BasketProductCard Basket=basket OnChange=@UpdateBasketList/>
                }
            </div>
            <div class="col-4 text-center">
                <div class="container bg-light mb-2">
                    <h2 class="mb-3">Your Shopping Basket:</h2>
                    <h3 class="mb-1">Total Items: @state.BasketCount</h3>
                    <h3>Total Cost: £@basketVM.BasketTotal</h3>
                    <!-- Button Options -->
                    <a class="btn btn-primary w-100 p-2 m-1" @onclick="(() => CheckoutConfirm())">
                        <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M20,8H4V6H20M20,18H4V12H20M20,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V6C22,4.89 21.1,4 20,4Z" />
                        </svg>
                        Checkout</a>
                    <a class="btn btn-outline-secondary w-100 p-2 m-1" href="/">Continue Shopping</a>
                    <a class="btn btn-danger w-100 p-2 m-1" @onclick="(() => EmptyBasket())">
                        <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M3,10H6V7H3V10M5,5H8V2H5V5M8,10H11V7H8V10M17,1L12,6H15V10H19V6H22L17,1M7.5,22C6.72,22 6.04,21.55 5.71,20.9V20.9L3.1,13.44L3,13A1,1 0 0,1 4,12H20A1,1 0 0,1 21,13L20.96,13.29L18.29,20.9C17.96,21.55 17.28,22 16.5,22H7.5M7.61,20H16.39L18.57,14H5.42L7.61,20Z" />
                        </svg>
                        Empty Basket</a>
                </div>
                <div class="container mb-2 bg-light">
                    <!-- Postage Options shall be added here... -->
                </div>
                
            </div>
        </div>
    </div>
}

@code 
{
    ShoppingBasketVM? basketVM;

    //Get the Basket when the page is initialised
    protected override async Task OnInitializedAsync()
    {
        basketVM = await basket.shoppingBasket();
    }

    private async void UpdateBasketList()
    {
        //When the EventCallback is triggered, re-render the basket to show that items have been removed
        //Console.WriteLine("EventCallback has been invoked...");
        basketVM = await basket.shoppingBasket();
        base.StateHasChanged();
    }

    //Empty Basket Function
    private async void EmptyBasket()
    {
        var empty = await js.InvokeAsync<bool>("confirmEmpty", "Confirmation", $"Are you sure you empty your shopping basket?", "question");
        if (empty)
        {
            await basket.EmptyCart();
            await js.InvokeVoidAsync("confirmChanges", "Success", $"Your shopping basket has been emptied!", "success");
            basketVM = await basket.shoppingBasket();
            state.SetBasketCount(0);
        }
        base.StateHasChanged();
    }

    //Checkout, ensure basket has items before redirecting
    public async void CheckoutConfirm()
    {
        //If Basket Item Count is more than zero, Navigate to Checkout...
        var itemCount = await basket.GetCount();
        if (itemCount > 0)
        {
            nav.NavigateTo("/Checkout");
        }
        else
        {
            await js.InvokeVoidAsync("confirmChanges", "Failed", $"You need an item in your basket to checkout!", "warning");
        }
    }
}
