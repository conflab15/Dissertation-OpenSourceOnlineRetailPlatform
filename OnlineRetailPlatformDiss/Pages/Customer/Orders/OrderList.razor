@using Microsoft.EntityFrameworkCore
@using OnlineRetailPlatformDiss.Models
@using OnlineRetailPlatformDiss.Services
@using OnlineRetailPlatformDiss.Data;
@inject ApplicationDbContext context;
@inject IJSRuntime js;
@inject AuthenticationStateProvider auth;

@page "/MyOrders";
@attribute [Authorize];
<PageTitle>My Orders</PageTitle>

<div class="container">
    @if(ShowOrderDetails)
    {
        <OrderDetailsComponent Order=@OrderToShow CloseDetails=@CloseDetails />
    }

    <div class="row">
        <div class="col-7">
            @if(orders != null)
            {
                @foreach(var order in orders)
                {
                    <div class="card">
                        <h5 class="card-header">Order ID: @order.OrderId</h5>
                        <div class="card-body">
                            <h5 class="card-title">Order Date: @order.OrderDate</h5>
                            <p class="card-text">Order Total: £@order.OrderTotal</p>
                            <p class="card-text">Total Items: @order.OrderLines.Count</p>
                            <button class="btn btn-outline-primary" @onclick="@(() => ShowDetails(order))">View Details</button>
                        </div>
                    </div>
                    <div class="divider pt-2" />
                }
            }
        </div>
        <div class="col-5 text-center">
            <div class="container bg-light mb-2">
                <h2 class="mb-3">Orders for: @UserEmail</h2>
                <h3 class="mb-1">Total Orders: @orders?.Count</h3>
                <!-- Button Options -->
            </div>
        </div>
    </div>
</div>

@code {
    List<OrderModel>? orders; //List of Orders to sort through...
    OrderModel? OrderToShow; //The Order to show via the modal...
    string? UserEmail; //String for the Users email...
    bool ShowOrderDetails; //Boolean value to trigger a modal...

    protected override void OnInitialized()
    {
        UserEmail = auth.GetAuthenticationStateAsync().Result.User.Identity?.Name; //Get the current user
        orders = context.Orders?.Include("OrderLines").Where(
            o => o.Email == UserEmail).ToList(); //Get the Order, as well as the Items in the Order...
    }

    private void ShowDetails(OrderModel order)
    {
        //Get the Order Model and update the OrderToShow variable
        OrderToShow = order;
        //ChangeShowOrderDetails...
        ShowOrderDetails = true;
    }

    private void CloseDetails()
    {
        //When EventCallback is triggered, do this...
        ShowOrderDetails = false;
    }
}
