@using OnlineRetailPlatformDiss.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging;
@using OnlineRetailPlatformDiss.Services;
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject ShoppingBasketService basket;
@inject AppState state;
@inject IJSRuntime js; //JS functionality to create a SweetAlert.

<!-- Product Card (Customer) to be displayed within the Index of the application... -->

    @if(product is not null)
    {
        <div class="card mb-4 shadow-sm" id="productCard">
            @if(product.ImageUrl == null)
            {
                <img class="card-img-top mb-1 p-1" src="/images/products/noimageplaceholder.jpg" alt="Placeholder Image" />
            }
            else
            {
                <img class="card-img-top mb-1 p-1" id="productCardImg" src="@product.ImageUrl" alt="Product Image">
            }
            <div class="card-body">
                <a href="/product/@product.ProductID"><h1 class="card-title">@product.ProductName</h1></a>
                <p class="card-text">@product.ProductDescription</p>
                <p class="card-text pt-1">Sold by: @product.BusinessName</p>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group">
                        <a class="btn btn-sm btn-outline-secondary" href="/product/@product.ProductID">
                            <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
                            </svg>
                            View</a>
                        @if (product.StockLevel <= 0)
                        {
                            <button class="btn btn-sm btn-outline-danger disabled">      
                                <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M23 10L22.96 10.29L20.9 17.7L12.2 9H15L12 4.74L10.32 7.12L8.89 5.69L11.18 2.43C11.36 2.17 11.66 2 12 2S12.65 2.17 12.83 2.44L17.42 9H22C22.55 9 23 9.45 23 10M22.11 21.46L20.84 22.73L19.03 20.92C18.86 20.97 18.68 21 18.5 21H5.5C4.72 21 4.04 20.55 3.71 19.9L1.1 10.44L1 10C1 9.45 1.45 9 2 9H6.58L6.8 8.69L1.11 3L2.39 1.73L22.11 21.46M13.85 15.74L11.26 13.15C10.5 13.44 10 14.16 10 15C10 16.11 10.9 17 12 17C12.84 17 13.56 16.5 13.85 15.74Z" />
                                </svg>Out of Stock</button>
                        }
                        else
                        {
                            <a class="btn btn-sm btn-outline-primary" @onclick="(() => addToBasket(product))">
                                <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M20 15V18H23V20H20V23H18V20H15V18H18V15H20M23 10L22.96 10.29L22 13.8C21.11 13.29 20.09 13 19 13C15.69 13 13 15.69 13 19C13 19.7 13.13 20.37 13.35 21H5.5C4.72 21 4.04 20.55 3.71 19.9L1.1 10.44L1 10C1 9.45 1.45 9 2 9H6.58L11.18 2.43C11.36 2.17 11.66 2 12 2S12.65 2.17 12.83 2.44L17.42 9H22C22.55 9 23 9.45 23 10M14 15C14 13.9 13.11 13 12 13S10 13.9 10 15 10.9 17 12 17 14 16.11 14 15M15 9L12 4.74L9 9H15Z" />
                                </svg>
                                Add to Basket</a>
                        }
                    </div>
                    <p class="text-muted pt-3">£@product.ProductPrice</p>
                </div>
            </div>
        </div>
    }
    
@code {
    [Parameter]
    public ProductModel? product { get; set; }

    //Add To Basket Method...
    private async void addToBasket(ProductModel product)
    {
        try
        {
            var count = await basket.AddToBasket(product, 1); //Getting the returned product count to update the appstate...
            state.SetBasketCount(count); //Setting the AppState with the returned count...

            await js.InvokeVoidAsync("confirmChanges", "Added to Basket", $"1 x {product.ProductName} has been added to your basket!", "success");
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("confirmChanges", "Failed", $"The product could not be added to your Basket: {e.Message}", "warning");
        }
        
        base.StateHasChanged();
    }

}
