@using OnlineRetailPlatformDiss.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging;
@using OnlineRetailPlatformDiss.Services;
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject ShoppingBasketService basket;
@inject IJSRuntime js; //JS functionality to create a SweetAlert.

<!-- Product Card (Customer) to be displayed within the Index of the application... -->

    @if(product is not null)
    {
        <div class="card mb-4 shadow-sm" id="productCard">
            @if(product.ImageUrl == null)
            {
                <img class="card-img-top mb-1 p-1" src="/images/products/noimageplaceholder.jpg" alt="Placeholder Image" />
            }
            else
            {
                <img class="card-img-top mb-1 p-1" src="@product.ImageUrl" alt="Product Image">
            }
            <div class="card-body">
                <h1 class="card-title">@product.ProductName</h1>
                <p class="card-text">@product.ProductDescription</p>
                <p class="card-text pt-1">Sold by: @product.BusinessName</p>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group">
                        <a class="btn btn-sm btn-outline-secondary" href="#">View</a>
                        @if (product.StockLevel <= 0)
                        {
                            <a class="btn btn-sm btn-outline-danger disabled">Out of Stock</a>
                        }
                        else
                        {
                            <a class="btn btn-sm btn-outline-primary" @onclick="(() => addToBasket(product))">Buy</a>
                        }
                    </div>
                    <p class="text-muted pt-3">£@product.ProductPrice</p>
                </div>
            </div>
        </div>
    }
    
@code {
    [Parameter]
    public ProductModel? product { get; set; }

    //Add To Basket Method...
    private async void addToBasket(ProductModel product)
    {
        try
        {
            await basket.AddToBasket(product);
            await js.InvokeVoidAsync("confirmChanges", "Added to Basket", $"1 x {product.ProductName} has been added to your basket!", "success");
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("confirmChanges", "Failed", $"The product could not be added to your Basket: {e.Message}", "warning");
        }
        
        base.StateHasChanged();
    }

}
