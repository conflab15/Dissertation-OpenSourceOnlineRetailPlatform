@using OnlineRetailPlatformDiss.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging;
@using OnlineRetailPlatformDiss.Services;
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject ShoppingBasketService basket;
@inject AppState state;
@inject IJSRuntime js; //JS functionality to create a SweetAlert.

@page "/product/{ProductId:guid}"

<!-- Product Details -->
@if (Product is not null)
{
    <div class="container m-4 shadow-lg">
        <div class="row">
            <div class="col-6">
                @if(Product.ImageUrl == null)
                {
                    <img src="/images/products/noimageplaceholder.jpg" alt="Placeholder Image" id="ProductDetailsImg" />
                }
                else
                {
                    <img src="@Product.ImageUrl" alt="Product Image" id="ProductDetailsImg" />
                }
            </div>
            <div class="col-6 pt-5 text-center align-items-center">
                <h3 class="mb-3">
                    @Product.ProductName
                    @if ((Product.CreatedDate - DateTime.Today).TotalDays < 1)
                    {
                        <span class="badge bg-success m-2">New</span>
                    }
                </h3>
                <h5 class="mb-3">@Product.ProductDescription</h5>
                <div class="divider m-2 pb-2" />
                <ul id="addresslist">
                    <li><h5>Sold by: @Product.BusinessName</h5></li>
                    @if(Product.StockLevel <= 0)
                    {
                        <li class="text-danger"><h5>Available units: 0</h5></li>
                    }
                    else
                    {
                        <li><h5>Available units: @Product.StockLevel</h5></li>
                    }
                    <li><h5><strong>£@Product.ProductPrice</strong></h5></li>
                </ul>
                @if(Product.Colours?.Count == 1)
                {
                    <p class="card-text pt-1">Colour/Style: @Product.Colours[0].Colour</p>
                }
                else
                {
                    @if (Product?.Colours?.Count > 0)
                    {
                    <h5 class="card-text pt-1">Select Style/Colour</h5>
                    <select class="form-select form-select p-3 w-90" aria-label="StyleSelect" @bind="colour">
                        <option selected>Please select a colour</option>
                        @foreach (var item in Product?.Colours)
                        {
                            <option value="@item.Colour">@item.Colour</option>
                        }
                    </select>
                    }                 
                }
                @if (Product.StockLevel <= 0)
                {
                    <button class="btn btn-sm btn-outline-danger disabled">      
                        <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M23 10L22.96 10.29L20.9 17.7L12.2 9H15L12 4.74L10.32 7.12L8.89 5.69L11.18 2.43C11.36 2.17 11.66 2 12 2S12.65 2.17 12.83 2.44L17.42 9H22C22.55 9 23 9.45 23 10M22.11 21.46L20.84 22.73L19.03 20.92C18.86 20.97 18.68 21 18.5 21H5.5C4.72 21 4.04 20.55 3.71 19.9L1.1 10.44L1 10C1 9.45 1.45 9 2 9H6.58L6.8 8.69L1.11 3L2.39 1.73L22.11 21.46M13.85 15.74L11.26 13.15C10.5 13.44 10 14.16 10 15C10 16.11 10.9 17 12 17C12.84 17 13.56 16.5 13.85 15.74Z" />
                        </svg>Out of Stock
                    </button>
                }
                else
                {
                <div class="input-group p-3 w-90">
                    <input type="number" class="form-control input-value p-3" min="0" max="@Product.StockLevel" @bind-value="Amount"  />
                    <div class="input-group-append"> 
                        <button type="submit" class="btn btn-outline-primary p-3" value="Add to Basket" @onclick="(() => AddToBasket(Product, Amount))">Add to Basket</button>
                    </div>
                </div>
                }
                <div class="d-flex justify-content-evenly align-items-center">
                    <a href="/ShoppingBasket" class="btn btn-lg btn-outline-success" id="basketBtn">My Basket</a>
                </div>

                
            </div>
        </div>
    </div>
    <div class="divider m-4 pb-1" />
    <div class="container m-4 shadow-lg">
        <div class="row">
            <div class="col-6 pt-5 text-center align-items-center">
                <h3 class="mb-3">@Business.BusinessName</h3>
                <h5 class="mb-3">@Business.BusinessDesc</h5>
                <a class="btn btn-lg btn-outline-primary" href="/customer/business/@Product.BusinessName">View the Business</a>
            </div>
            <div class="col-6">
                @if(Business.BannerUrl == null)
                {
                    <img src="/images/products/noimageplaceholder.jpg" alt="Placeholder Image" id="ProductDetailsImg" />
                }
                else
                {
                    <img src="@Business.BannerUrl" class="img-fluid border rounded-3 shadow-lg m-2 p-2" alt="Business Image" width="700" height="500" loading="lazy">
                }
            </div>
        </div>
    </div>
}

<!-- Business Details -->


@code {
    [Parameter]
    public Guid? ProductId { get; set; }
    ProductModel? Product;
    BusinessAccountModel? Business;
    int Amount = 1;
    string? colour;


    protected override void OnInitialized()
    {
        if (ProductId is not null)
        {
            Product = _context.Products.FirstOrDefault(p => p.ProductID == ProductId); //Get the Product Model...
            if (Product is not null)
            {
                Business = _context.BusinessAccount.FirstOrDefault(b => b.BusinessName == Product.BusinessName);
            }
        }
    }

    //Add To Basket Method...
    private async void AddToBasket(ProductModel product, int quantity)
    {
        if(quantity <= 0)
        {
            quantity = 1;
        }

        try
        {
            //Handling of different types of potential errors
            if (product.Colours?.Count == 1) //If only one style exists, use this
            {
                colour = product.Colours[0].Colour;
                var count = await basket.AddToBasket(product, Amount, colour); //Getting the returned product count to update the appstate...
                state.SetBasketCount(count); //Setting the AppState with the returned count.
                await js.InvokeVoidAsync("confirmChanges", "Added to Basket", $"1 x {product.ProductName} has been added to your basket!", "success");
            }
            else if (product.Colours?.Count == 0) //If none exist, use a placeholder
            {
                colour = "N/A";
                var count = await basket.AddToBasket(product, Amount, colour); //Getting the returned product count to update the appstate...
                state.SetBasketCount(count); //Setting the AppState with the returned count.
                await js.InvokeVoidAsync("confirmChanges", "Added to Basket", $"1 x {product.ProductName} has been added to your basket!", "success");
            }
            else if (product.Colours?.Count > 1 && colour is null) //If multiple exist and none are selected...
            {
                await js.InvokeVoidAsync("confirmChanges", "Failed", $"You need to select a colour or style before adding to the basket", "warning");
            }
            else //If one is selected from the list, proceed as normal...
            {
                var count = await basket.AddToBasket(product, Amount, colour); //Getting the returned product count to update the appstate...
                state.SetBasketCount(count); //Setting the AppState with the returned count.
                await js.InvokeVoidAsync("confirmChanges", "Added to Basket", $"1 x {product.ProductName} has been added to your basket!", "success");
            }
        }
        catch (Exception e)
        {
            await js.InvokeVoidAsync("confirmChanges", "Failed", $"The product could not be added to your Basket: {e.Message}", "warning");
        }

        StateHasChanged();
    }


}
