@using Microsoft.EntityFrameworkCore
@using OnlineRetailPlatformDiss.Models;
@using Microsoft.Extensions.Logging
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;

<div class="container justify-content-center pt-2 pb-2" id="productSearch">
    <div class="row">
        <div class="col-md-12">
            <div class="input-group mb-3"> <input type="text" class="form-control input-text" name="SearchString" id="searchField" @bind-value="SearchText" placeholder="Search by name....">
                <div class="input-group-append"> <input type="submit" class="btn btn-outline-primary btn-lg" value="Search" id="searchBtn" @onclick="ShowProducts" /> </div>
            </div>
        </div>
    </div>
    <div class="row text-center p-2">
        <div class="col-2">
            <h2>Sort by:</h2>
        </div>
        <div class="col-2">
            <a class="btn btn-outline-primary" @onclick='(() => FilterProducts("Ascending"))'>Price (Ascending)</a>
        </div>
        <div class="col-2">
            <a class="btn btn-outline-primary" @onclick='(() => FilterProducts("AZ"))'>Title (A-Z)</a>
        </div>
        <div class="col-2">
            <a class="btn btn-outline-primary" @onclick='(() => FilterProducts("Newest"))'>Whats new</a>
        </div>
        <div class="col-4">
            <h5>@message</h5>
        </div>
    </div>
</div>

@if(!Products.Any())
{
    <div class="alert alert-warning d-flex align-items-center mt-3" role="alert">
        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
        <div>
        <p>We couldn't find any products! Please try again later!</p>
        </div>
    </div>
}
else
{
    <div class="row pt-5 mt-3 pl-3 bg-light">
        @foreach (var product in Products)
        {
        <div class="col-lg-4 d-flex align-items-center">
            <ProductCard product="product" />
        </div>
        }
    </div>

}

@code {
    [Parameter] public string? BusinessName { get; set; } //Addition which allows this component to be used within the ViewBusiness page
                                                          //This allows the ViewBusiness page to sort and filter products sold by the business.
    public string? SearchText = "";
    public string? message = "";
    public List<ProductModel>? Products;

    protected override async void OnInitialized()
    {
        Products = await GetProducts(BusinessName);
    }

    //Searching Products by the title
    private async void ShowProducts()
    {
        //Searching for products by Title...
        Products = await GetProducts(BusinessName); //This will ensure that the list is reset before the products are searched for again
                                                    //Reassign the list to show products which only match the search criteria
        Products = Products.Where(p => p.ProductName.ToLower().Contains(SearchText?.ToLower())).ToList();
        message = "Search Criteria: '" + SearchText + "'";
        SearchText = ""; //Empty the search text field once assigned...
        base.StateHasChanged();
    }

    //Filtering products by different parameters...
    private async void FilterProducts(string parameter)
    {
        Products = await GetProducts(BusinessName); //Resetting the List to ensure the list is correctly sorted.

        //Switch Case statement, provides the ability to easily add more sorting options 
        switch (parameter)
        {
            case "Ascending":
                Products = Products.OrderBy(p => p.ProductPrice).ToList(); //Order by Price, in ascending order
                message = "Sorted by Price (Ascending)";
                break;
            case "AZ":
                Products = Products.OrderBy(p => p.ProductName).ToList();
                message = "Sorted by Title (A-Z)";
                break;
            case "Newest":
                Products = Products.OrderByDescending(p => p.CreatedDate).ToList();
                message = "Sorted by What's new";
                break;
        }
        base.StateHasChanged();
    }

    //Task - Get Products by Business Name if parameter is present, else, get all products...
    private async Task<List<ProductModel>> GetProducts(string BusinessName)
    {
        List<ProductModel>? products;

        @if (BusinessName is not null)
        {
            products = _context.Products?.Include("Colours").Where(b => b.BusinessName == BusinessName).ToList();
        }
        else
        {
            products = _context.Products?.Include("Colours").ToList();
        }

        return products;
    }
}
