@using OnlineRetailPlatformDiss.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging
@inject OnlineRetailPlatformDiss.Data.ApplicationDbContext _context;
@inject AuthenticationStateProvider auth;
@inject ILogger<ViewProducts> Logger
@attribute [Authorize]

<!-- This needs to be removed in the future to act as a component than an individual page -->
@page "/product/view"

<div class="container">
    <div class="row">
        <div class="col">
            <h1>View Business Products</h1>
        </div>
    </div>

    <!-- If there are no Businesses owned by the User, display this message: -->
    @if (businesses.Count == 0)
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
          <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill"/></svg>
          <div>
            <p>You must create a Business to be able to view its products</p>
            <a class="btn btn-primary" href="/business/create">Create Business</a>
          </div>
        </div>
    }
    else
    {
        <!-- If there are businesses owned by the User, display this!-->
        <EditForm Model="@search">
            <div class="mb-3">
                <label for="businessName" class="form-label">Please select your business:</label>
                <InputSelect class="form-select" id="businessName" @bind-Value="search.BusinessNames" placeholder="20" enabled="true" @oninput="@GetProducts">
                <option value="">Select a Business...</option>
                @foreach (var business in businesses)
                    {
                        <option value="@business.BusinessName">@business.BusinessName</option>
                    }
                </InputSelect>
            </div>
        </EditForm>

        @if(businessSelected)
        {
            <ListProducts businessName="@BusinessName" @ref="productList" />
        }
    }

</div>


@code {

    private List<BusinessAccountModel>? businesses; //List of Users businesses
    private List<ProductModel>? businessProducts; //List of Businesses products.
    private string? manager; //Manager of the business (User.Identity.Name)
    private string? BusinessName;//Empty string to assign a business name too. 
    public bool businessSelected = false;
    public ListProducts? productList;

    private class SearchModel 
    {
        public string? BusinessNames;
    }
    private SearchModel search = new SearchModel(); //Search Model to obtain a string of the business name from the Select DropDown form

    protected override void OnInitialized()
    {
        BusinessName = String.Empty;
        manager = auth.GetAuthenticationStateAsync().Result.User.Identity.Name; //Finding the active users email address.
        businesses = _context.BusinessAccount.Where(x => x.ManagerID == manager).ToList(); //Finding the businesses of the active user to select from. 
    }

    private void GetProducts()
    {
        businessSelected = true;
        var x = BusinessName;

        x = search.BusinessNames; //When form is submitted, assign the name to this string

        this.StateHasChanged(); //Reload the page

        //var x = BusinessName;
        //Finding all products owned by the business, adding them to the businessProducts list.
        //businessProducts = await _context.Products.Where(x => x.BusinessName == search.BusinessNames).ToListAsync();
        //Change the state of the page to refresh the page and populate the list...
        //base.StateHasChanged();
    }
}